offline: true
debug: true
github_proxy: https://gh-proxy.com/
mirrors_source:
  - ./scripts/CentosAliyunMirrors.sh # SH脚本则是通过SH脚本切换源 阿里源 https://mirrors.aliyun.com/centos/ # 华为源 https://mirrors.huaweicloud.com/home #清华源 https://mirrors.tuna.tsinghua.edu.cn/、
  # - ./scripts/naidia-source.sh # 添加显卡驱动源 -- 可以添加多个源但是系统源只能添加一个
  # - /opt/somwork/download/centos/7.9/centos7.iso # ISO 则是挂载镜像加载源 一般情况下二选一
resources:
  # 下载系统镜像
  # - name: "centos"
  #   version: "7.9"
  #   urls:
  #     - "https://mirrors.aliyun.com/centos/7.9.2009/isos/x86_64/CentOS-7-x86_64-DVD-2207-02.iso"
  #   target: "{{.CacheDir}}/centos7.iso"
  # - name: "ubuntu"
  #   version: "20.04.6"
  #   urls:
  #     - "https://mirrors.aliyun.com/ubuntu-releases/focal/ubuntu-20.04.6-live-server-amd64.iso"
  #   target: "{{.CacheDir}}/ubuntu.iso"
  - name: "docker-install"
    version: "2.4"
    urls:
      - "https://structured.oss-cn-beijing.aliyuncs.com/docker/{{.Version}}/docker-manager.sh"
    target: "{{.WorkDir}}/scripts/{{.Filename}}"
    # checksum: "sha256:abc123..." # 注释则不开启验证
  - name: "docker"
    version: "24.0.6"
    method: "binary"
    urls:
      - "https://download.docker.com/linux/static/stable/x86_64/docker-{{.Version}}.tgz"
    target: "{{.Name}}-{{.Version}}.tgz"
    post_install:
      - "echo 执行安装脚本-携带参数"
    #checksum: "sha256:abc123..." # 注释则不开启验证
  - name: "docker-compose"
    version: "2.24.0"
    method: "binary"
    urls:
      - "https://github.com/docker/compose/releases/download/v{{.Version}}/docker-compose-linux-x86_64"
    target: "{{.Name}}"
  - name: "cri-dockerd"
    version: "0.3.17"
    method: "binary"
    urls:
      - "https://github.com/Mirantis/cri-dockerd/releases/download/v{{.Version}}/cri-dockerd-{{.Version}}.amd64.tgz"
      - "https://raw.githubusercontent.com/Mirantis/cri-dockerd/master/packaging/systemd/cri-docker.service"
      - "https://raw.githubusercontent.com/Mirantis/cri-dockerd/master/packaging/systemd/cri-docker.socket"
    target: "{{.Filename}}"
  - name: "cri-dockerd"
    version: "0.3.9"
    method: "binary"
    urls:
      - "https://github.com/Mirantis/cri-dockerd/releases/download/v{{.Version}}/cri-dockerd-{{.Version}}.amd64.tgz"
      - "https://raw.githubusercontent.com/Mirantis/cri-dockerd/master/packaging/systemd/cri-docker.service"
      - "https://raw.githubusercontent.com/Mirantis/cri-dockerd/master/packaging/systemd/cri-docker.socket"
    target: "{{.Filename}}"
    post_install:
      - "tar -xvf {{.CacheDir}}/cri-dockerd-{{.Version}}.amd64.tgz"
      - "sudo mv {{.CacheDir}}/cri-dockerd/cri-dockerd /usr/local/bin/"
      - "sudo mkdir -p /etc/systemd/system"
      - "sudo cp {{.CacheDir}}/cri-docker.service /etc/systemd/system/"
      - "sudo cp {{.CacheDir}}/cri-docker.socket /etc/systemd/system/"
      - "sudo systemctl daemon-reload"
      - "sudo systemctl enable cri-docker.service"
      - "sudo systemctl enable --now cri-docker.socket"
      - "sudo systemctl start cri-docker.service"
  - name: "kubernetes"
    version: "1.28.2"
    method: "binary"
    urls:
      - "https://storage.googleapis.com/kubernetes-release/release/v{{.Version}}/bin/linux/amd64/kubeadm"
      - "https://storage.googleapis.com/kubernetes-release/release/v{{.Version}}/bin/linux/amd64/kubectl"
      - "https://storage.googleapis.com/kubernetes-release/release/v{{.Version}}/bin/linux/amd64/kubelet"
      - "https://structured.oss-cn-beijing.aliyuncs.com/somwork/service/kubelet.service"
      - "https://structured.oss-cn-beijing.aliyuncs.com/somwork/scripts/init-kubernetes.sh"
    target: "{{.Filename}}"
    pre_install:
      - "echo k8s "
    post_install:
      - "cp {{.CacheDir}}/* /usr/local/bin"
      - "chmod +x /usr/local/bin/kubeadm"
      - "chmod +x /usr/local/bin/kubectl"
      - "chmod +x /usr/local/bin/kubelet"
    hosts:
      - "127.0.0.1"
    target: "{{.Filename}}"
  - name: "crictl"
    version: "1.28.0"
    urls:
      - "https://github.com/kubernetes-sigs/cri-tools/releases/download/v{{.Version}}/crictl-v{{.Version}}-linux-amd64.tar.gz"
    target: "{{.Filename}}"
    post_install:
      - "sudo tar zxvf {{.CacheDir}}/crictl-v{{.Version}}-linux-amd64.tar.gz -C /usr/local/bin"
      - "sudo chmod +x /usr/local/bin/crictl"
  # - name: "k8s-images"
  #   version: "1.28.2"
  #   urls:
  #     - "https://github.com/structure-projects/somwork/master/images/k8s-images-{{Version}}.tar.gz"
  #   target: "{{.Filename}}"
  #   post_install:
  #     - "echo 导入镜像"
nodes:
  - host: "tools"
    ip: "127.0.0.1"
    role: "manager"
    sshKey: "~/.ssh/id_rsa"
    mirrors_source: ./scripts/CentosAliyunMirrors.sh 
cluster:
  -  name: "my-swarm"
     type: "swarm"
     master:
      - host: "swarm-mgr-01"
     worker:
      - host: "swarm-mgr-01"
     swarmConfig:
      advertiseAddr: "192.168.1.100" # 管理节点广播地址
      listenAddr: "0.0.0.0:2377" # 监听地址
      defaultAddrPool: # 地址池配置
        - "10.20.0.0/16"
      subnetSize: 24 # 子网大小
      dataPathPort: 4789 # 数据通道端口
  -  name: "my-k8s"
     type: "k8s"
     master:
      - host: "swarm-k8s-01"
     worker:
      - host: "swarm-k8s-01"
     k8sConfig:
      version: "1.25.0" # Kubernetes版本
      podNetworkCidr: "10.244.0.0/16" # Pod网络CIDR
      serviceCidr: "10.96.0.0/12" # Service网络CIDR
      runtime: docker/co # 容器运行时时docker 或容器 1.24 以上和以下执行过程略有区别
      resources:
        - kubernetes
        - 
images:
